name: iOS Pentest Pipeline (No Secrets Required - Full Scripts)

on:
  workflow_dispatch:
    inputs:
      artifact_path:
        description: 'Path to IPA in repo (relative). If empty pipeline will attempt to build from Xcode project.'
        required: false
        default: 'ios.ipa'
  push:
    branches:
      - main
    paths:
      - '**/*.ipa'
      - 'scripts/**'
      - '**/*.swift'
  pull_request:
    branches:
      - main

concurrency:
  group: ios-pentest-no-secrets-${{ github.run_id }}
  cancel-in-progress: false

env:
  ARTIFACT_DIR: pentest-artifacts
  MOBSF_PORT: 8000
  SCRIPT_DIR: scripts

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      ipa_path: ${{ steps.get-artifact.outputs.ipa_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure artifact dir & scripts are executable
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          chmod +x ${{ env.SCRIPT_DIR }}/*.sh || true

      - name: Get IPA input (workflow input) or find in repo
        id: get-artifact
        run: |
          if [ -n "${{ github.event.inputs.artifact_path }}" ]; then
            echo "ipa_path=${{ github.event.inputs.artifact_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          IPA=$(git ls-files '*.ipa' | head -n1 || true)
          if [ -n "$IPA" ]; then
            echo "ipa_path=$IPA" >> $GITHUB_OUTPUT
          else
            echo "ipa_path=" >> $GITHUB_OUTPUT
          fi

  mobsf_static_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (job-level)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Start MobSF Docker (no API key required)
        run: |
          docker run --rm -d --name mobsf -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          for i in $(seq 1 30); do
            if curl -sS "http://localhost:${MOBSF_PORT}/" > /dev/null; then break; fi
            sleep 2
          done

      - name: Prepare IPA for scan
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          if [ -n "${{ needs.prep.outputs.ipa_path }}" ]; then
            cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa"
          else
            echo "No IPA provided; aborting MobSF scan." > ${{ env.ARTIFACT_DIR }}/mobsf-skip.txt
            exit 1
          fi
          ls -la ${{ env.ARTIFACT_DIR }}

      - name: Run MobSF scan script (no API key) — REQUIRED
        run: |
          ${SCRIPT_DIR}/mobsf_scan_noapikey.sh "${{ env.ARTIFACT_DIR }}/target.ipa" "http://localhost:${MOBSF_PORT}" "${{ env.ARTIFACT_DIR }}"

      - name: Stop MobSF
        if: always()
        run: docker stop mobsf || true

      - name: Upload MobSF reports
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports
          path: ${{ env.ARTIFACT_DIR }}/mobsf_report.*,${{ env.ARTIFACT_DIR }}/mobsf_*.*
          if-no-files-found: fail

  binary_static:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (job-level)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Install packages required by script
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip binutils python3-pip file
          pip3 install macholib || true

      - name: Copy IPA and run binary static script — REQUIRED
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          if [ -n "${{ needs.prep.outputs.ipa_path }}" ]; then
            cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa"
          else
            echo "No IPA present; binary static analysis requires an IPA" >&2
            exit 1
          fi
          ${SCRIPT_DIR}/binary_static_analysis.sh "${{ env.ARTIFACT_DIR }}/target.ipa" "${{ env.ARTIFACT_DIR }}"

      - name: Upload binary analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-analysis
          path: ${{ env.ARTIFACT_DIR }}/binary-*,${{ env.ARTIFACT_DIR }}/classdump-headers/**
          if-no-files-found: fail

  deps_and_codeql:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (job-level)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Run deps_scan script (OWASP DC) — REQUIRED
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          ${SCRIPT_DIR}/deps_scan.sh "${{ env.ARTIFACT_DIR }}"

      - name: Upload dependency-check artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports
          path: ${{ env.ARTIFACT_DIR }}/*.json
          if-no-files-found: fail

  secret_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (job-level)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Run secret scan script (detect-secrets + truffleHog) — REQUIRED
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          ${SCRIPT_DIR}/secret_scan.sh "${{ env.ARTIFACT_DIR }}"

      - name: Upload secret-scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan
          path: ${{ env.ARTIFACT_DIR }}/detect-secrets.json,${{ env.ARTIFACT_DIR }}/trufflehog-local.json
          if-no-files-found: fail

  macos_runtime:
    needs: prep
    runs-on: macos-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (macOS)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Detect whether to run CodeQL (Swift/Xcode present)
        id: detect_codeql
        run: |
          set -e
          SWIFT_COUNT=$(git ls-files '*.swift' | wc -l || echo 0)
          HAS_XCODE=$(ls *.xcodeproj 2>/dev/null || ls *.xcworkspace 2>/dev/null || true)
          if [ "$SWIFT_COUNT" -gt 0 ] || [ -n "$HAS_XCODE" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

      - name: Initialize CodeQL (Swift) on macOS (only if code present)
        if: ${{ steps.detect_codeql.outputs.run == 'true' }}
        uses: github/codeql-action/init@v2
        with:
          languages: 'swift'

      - name: Attempt simulator build (no signing) — used by CodeQL and runtime checks
        run: |
          set -e
          if ls *.xcworkspace 1> /dev/null 2>&1 || ls *.xcodeproj 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace 2>/dev/null | head -n1 || true)
            PROJECT=$(ls *.xcodeproj 2>/dev/null | head -n1 || true)
            if [ -n "$WORKSPACE" ]; then
              SCHEME="$(basename ${WORKSPACE%.*})"
              xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build || true
            elif [ -n "$PROJECT" ]; then
              SCHEME="$(basename ${PROJECT%.*})"
              xcodebuild -project "$PROJECT" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build || true
            fi
          fi

      - name: Run CodeQL analyze (Swift) — only if code present
        if: ${{ steps.detect_codeql.outputs.run == 'true' }}
        uses: github/codeql-action/analyze@v2
        with:
          category: 'security'

      - name: Upload macos artifacts (if any)
        uses: actions/upload-artifact@v4
        with:
          name: macos-reports
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore

  collect_reports:
    needs: [mobsf_static_scan, binary_static, deps_and_codeql, secret_scan, macos_runtime]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable (job-level)
        run: chmod +x ${{ env.SCRIPT_DIR }}/*.sh

      - name: Run collect_reports.sh to create final archive
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          ${SCRIPT_DIR}/collect_reports.sh "${{ env.ARTIFACT_DIR }}"

      - name: Upload final pentest archive
        uses: actions/upload-artifact@v4
        with:
          name: pentest-all-reports
          path: ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz
          if-no-files-found: fail
