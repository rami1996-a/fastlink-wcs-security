name: iOS Pentest Pipeline (Inline Scripts, Validated)

on:
  workflow_dispatch:
    inputs:
      artifact_path:
        description: 'Path to IPA in repo (relative). If empty pipeline will attempt to build from Xcode project.'
        required: false
        default: 'ios.ipa'
  push:
    branches: [ main ]
    paths:
      - '**/*.ipa'
      - '.github/workflows/**'
      - 'scripts/**'
      - '**/*.swift'
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-pentest-no-secrets-${{ github.run_id }}
  cancel-in-progress: false

env:
  ARTIFACT_DIR: pentest-artifacts
  MOBSF_PORT: 8000

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      ipa_path: ${{ steps.get-artifact.outputs.ipa_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure artifact dir
        run: |
          mkdir -p "${{ env.ARTIFACT_DIR }}"

      - name: Get IPA input (workflow input) or find in repo
        id: get-artifact
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.artifact_path }}" ]; then
            echo "ipa_path=${{ github.event.inputs.artifact_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          IPA=$(git ls-files '*.ipa' | head -n1 || true)
          if [ -n "$IPA" ]; then
            echo "ipa_path=$IPA" >> $GITHUB_OUTPUT
          else
            echo "ipa_path=" >> $GITHUB_OUTPUT
          fi

  mobsf_static_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
      MOBSF_ADMIN_KEY: ${{ secrets.MOBSF_ADMIN_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start MobSF container (optional admin key)
        run: |
          set -euo pipefail
          if [ -n "${MOBSF_ADMIN_KEY:-}" ]; then
            docker run --rm -d --name mobsf -e MOBSF_ADMIN_KEY="${MOBSF_ADMIN_KEY}" -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          else
            docker run --rm -d --name mobsf -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          fi
          for i in $(seq 1 30); do
            if curl -sS "http://localhost:${MOBSF_PORT}/" >/dev/null 2>&1; then
              echo "MobSF reachable"
              break
            fi
            sleep 2
          done

      - name: Prepare IPA for MobSF
        run: |
          set -euo pipefail
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          if [ -z "${{ needs.prep.outputs.ipa_path }}" ]; then
            echo "No IPA path found; aborting MobSF job" >&2
            docker stop mobsf || true
            exit 1
          fi
          cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa"
          ls -lah "${{ env.ARTIFACT_DIR }}"

      - name: Upload & scan to MobSF (inline, fails on non-200)
        run: |
          set -euo pipefail
          IPA="${{ env.ARTIFACT_DIR }}/target.ipa"
          MOBSF_URL="http://localhost:${MOBSF_PORT}"
          OUTDIR="${{ env.ARTIFACT_DIR }}"
          if [ -n "${MOBSF_API_KEY:-}" ]; then
            UPLOAD_RAW=$(curl -s -w "\n%{http_code}" -F "file=@${IPA}" -H "Authorization:${MOBSF_API_KEY}" -H "X-Mobsf-Api-Key:${MOBSF_API_KEY}" "${MOBSF_URL}/api/v1/upload")
          else
            UPLOAD_RAW=$(curl -s -w "\n%{http_code}" -F "file=@${IPA}" "${MOBSF_URL}/api/v1/upload")
          fi
          HTTP_STATUS=$(echo "$UPLOAD_RAW" | tail -n1)
          echo "$UPLOAD_RAW" > "${OUTDIR}/mobsf_upload_raw.txt"
          # extract JSON body (all but last line)
          echo "$UPLOAD_RAW" | sed '$d' > "${OUTDIR}/mobsf_upload_response.json" || true
          if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "201" ]; then
            echo "MobSF upload failed with status $HTTP_STATUS" >&2
            echo "See ${OUTDIR}/mobsf_upload_response.json" >&2
            docker stop mobsf || true
            exit 1
          fi
          # extract "hash" field using grep/sed (portable)
          HASH=$(grep -o '"hash"[[:space:]]*:[[:space:]]*"[^"]*"' "${OUTDIR}/mobsf_upload_response.json" | head -n1 | sed 's/.*"hash"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
          if [ -z "$HASH" ]; then
            echo "MobSF did not return a hash; aborting" >&2
            docker stop mobsf || true
            exit 1
          fi
          curl -s -X POST --data "hash=${HASH}" "${MOBSF_URL}/api/v1/scan" > "${OUTDIR}/mobsf_scan_response.json" || true
          for fmt in json html xml pdf; do
            curl -s -X POST --data "hash=${HASH}" "${MOBSF_URL}/api/v1/report_${fmt}" -o "${OUTDIR}/mobsf_report.${fmt}" || \
            curl -s -X POST --data "hash=${HASH}" "${MOBSF_URL}/api/v1/download_${fmt}" -o "${OUTDIR}/mobsf_report.${fmt}" || true
          done
          echo "MobSF reports saved to ${OUTDIR}"

      - name: Stop MobSF
        if: always()
        run: docker stop mobsf || true

      - name: Upload MobSF reports (required)
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports
          path: ${{ env.ARTIFACT_DIR }}/mobsf_report.*,${{ env.ARTIFACT_DIR }}/mobsf_*.*
          if-no-files-found: error

  binary_static:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install utils
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y unzip binutils file python3-pip
          pip3 install --upgrade pip || true
          pip3 install macholib || true

      - name: Binary static analysis (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}"
          mkdir -p "$OUTDIR"
          IPA_PATH="${{ needs.prep.outputs.ipa_path }}"
          if [ -z "$IPA_PATH" ] || [ ! -f "$IPA_PATH" ]; then
            echo "IPA not found at $IPA_PATH" >&2
            exit 1
          fi
          cp "$IPA_PATH" "$OUTDIR/target.ipa"
          TMPDIR=$(mktemp -d)
          trap 'rm -rf "$TMPDIR"' EXIT
          unzip -qq "$OUTDIR/target.ipa" -d "$TMPDIR"
          APPDIR=$(find "$TMPDIR/Payload" -maxdepth 2 -type d -name "*.app" | head -n1 || true)
          if [ -z "$APPDIR" ]; then
            echo ".app not found in IPA" >&2
            exit 1
          fi
          BINNAME=$(python3 -c 'import plistlib,sys; p=plistlib.load(open("'"$APPDIR"'/Info.plist","rb")); print(p.get("CFBundleExecutable",""))' 2>/dev/null || true)
          if [ -z "$BINNAME" ]; then
            BINPATH=$(find "$APPDIR" -maxdepth 1 -type f -printf "%s %p\n" | sort -nr | awk 'NR==1{print $2}')
          else
            BINPATH="$APPDIR/$BINNAME"
          fi
          if [ ! -f "$BINPATH" ]; then
            echo "Binary not found at $BINPATH" >&2
            exit 1
          fi
          echo "Binary analysis for: $OUTDIR/target.ipa" > "$OUTDIR/binary-analysis-summary.txt"
          file "$BINPATH" >> "$OUTDIR/binary-analysis-summary.txt" 2>&1 || true
          strings "$BINPATH" | sed -n '1,1000p' > "$OUTDIR/binary-strings-top.txt" || true
          strings "$BINPATH" | egrep -i "http://|https://|api[_-]?key|apiKey|access[_-]?token|secret|password|BEGIN RSA PRIVATE KEY|AWS|oauth|jwt" | sort -u > "$OUTDIR/binary-suspect-strings.txt" || true
          if command -v nm >/dev/null 2>&1; then
            nm -n "$BINPATH" > "$OUTDIR/binary-nm-head.txt" 2> "$OUTDIR/binary-nm-err.txt" || true
          fi
          python3 - <<'PY' > "$OUTDIR/binary-entropy.txt"
import math,collections,sys
b=open("'''$BINPATH'''","rb").read()
if not b:
  print(0)
  sys.exit(0)
counts=collections.Counter(b)
e=0.0
for v in counts.values():
  p=v/len(b)
  e -= p * math.log(p,2)
print(e)
PY
          echo "binary artifacts created in $OUTDIR"

      - name: Upload binary artifacts (required)
        uses: actions/upload-artifact@v4
        with:
          name: binary-analysis
          path: ${{ env.ARTIFACT_DIR }}/binary-*,${{ env.ARTIFACT_DIR }}/classdump-headers/**
          if-no-files-found: error

  deps_and_codeql:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency scan (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}"
          mkdir -p "$OUTDIR"
          DC_VER="8.0.2"
          TMPDIR=$(mktemp -d)
          trap 'rm -rf "$TMPDIR"' EXIT
          ZIP_URL="https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VER}/dependency-check-${DC_VER}-release.zip"
          curl -fsSL "$ZIP_URL" -o "$TMPDIR/dc.zip"
          unzip -q "$TMPDIR/dc.zip" -d "$TMPDIR"
          DC_SCRIPT=$(find "$TMPDIR" -type f -name 'dependency-check.sh' | head -n1 || true)
          if [ -z "$DC_SCRIPT" ]; then
            echo "dependency-check script not found" >&2
            exit 1
          fi
          NVD_ARG=""
          if [ -n "${NVD_API_KEY:-}" ]; then
            NVD_ARG="--nvdApiKey ${NVD_API_KEY}"
          fi
          if [ -f Podfile.lock ]; then
            "$DC_SCRIPT" $NVD_ARG --project "iOS-Deps" --scan Podfile.lock --format JSON --out "$OUTDIR"
          else
            "$DC_SCRIPT" $NVD_ARG --project "iOS-Repo" --scan . --format JSON --out "$OUTDIR"
          fi

      - name: Upload dependency reports (required)
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports
          path: ${{ env.ARTIFACT_DIR }}/*.json
          if-no-files-found: error

  secret_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Secret scanning (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}"
          mkdir -p "$OUTDIR"
          pip3 install --upgrade pip >/dev/null 2>&1 || true
          pip3 install detect-secrets truffleHog >/dev/null 2>&1 || true
          detect-secrets scan > "$OUTDIR/detect-secrets.json" || true
          DETECT_SIZE=$(stat -c%s "$OUTDIR/detect-secrets.json" 2>/dev/null || echo 0)
          TRUFFLE_OK=1
          if trufflehog filesystem --json --repo_path . > "$OUTDIR/trufflehog-local.json" 2>/dev/null; then
            TRUFFLE_OK=0
          elif trufflehog filesystem --json . > "$OUTDIR/trufflehog-local.json" 2>/dev/null; then
            TRUFFLE_OK=0
          elif trufflehog --json filesystem . > "$OUTDIR/trufflehog-local.json" 2>/dev/null; then
            TRUFFLE_OK=0
          fi
          TRUFFLE_SIZE=$(stat -c%s "$OUTDIR/trufflehog-local.json" 2>/dev/null || echo 0)
          if [ "$DETECT_SIZE" -le 2 ] && [ "$TRUFFLE_OK" -ne 0 ]; then
            echo "Both detect-secrets and truffleHog failed to produce output; aborting" >&2
            exit 1
          fi

      - name: Upload secret-scan artifacts (required)
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan
          path: ${{ env.ARTIFACT_DIR }}/detect-secrets.json,${{ env.ARTIFACT_DIR }}/trufflehog-local.json
          if-no-files-found: error

  macos_runtime:
    needs: prep
    runs-on: macos-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect whether to run CodeQL
        id: detect_codeql
        run: |
          set -euo pipefail
          SWIFT_COUNT=$(git ls-files '*.swift' | wc -l || echo 0)
          HAS_XCODE=$(ls *.xcodeproj 2>/dev/null || ls *.xcworkspace 2>/dev/null || true)
          if [ "$SWIFT_COUNT" -gt 0 ] || [ -n "$HAS_XCODE" ]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

      - name: Initialize CodeQL (only if code present)
        if: ${{ steps.detect_codeql.outputs.run == 'true' }}
        uses: github/codeql-action/init@v2
        with:
          languages: 'swift'

      - name: Build for CodeQL & runtime checks (macOS)
        if: ${{ steps.detect_codeql.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          if ls *.xcworkspace 1> /dev/null 2>&1 || ls *.xcodeproj 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace 2>/dev/null | head -n1 || true)
            PROJECT=$(ls *.xcodeproj 2>/dev/null | head -n1 || true)
            if [ -n "$WORKSPACE" ]; then
              SCHEME="$(basename ${WORKSPACE%.*})"
              xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            elif [ -n "$PROJECT" ]; then
              SCHEME="$(basename ${PROJECT%.*})"
              xcodebuild -project "$PROJECT" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            fi
          else
            echo "No Xcode project/workspace present; skipping build"
            exit 1
          fi

      - name: Run CodeQL analyze (only if code present)
        if: ${{ steps.detect_codeql.outputs.run == 'true' }}
        uses: github/codeql-action/analyze@v2
        with:
          category: 'security'

      - name: Upload macos artifacts (best-effort)
        uses: actions/upload-artifact@v4
        with:
          name: macos-reports
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore

  collect_reports:
    needs: [mobsf_static_scan, binary_static, deps_and_codeql, secret_scan, macos_runtime]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Consolidate artifacts into final archive (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}"
          FINAL="$OUTDIR/final"
          mkdir -p "$FINAL"
          cp -r "$OUTDIR"/mobsf_report.* "$FINAL/" 2>/dev/null || true
          cp -r "$OUTDIR"/mobsf_* "$FINAL/" 2>/dev/null || true
          cp -r "$OUTDIR"/binary-* "$FINAL/binary/" 2>/dev/null || true
          cp -r "$OUTDIR"/classdump-headers "$FINAL/binary/" 2>/dev/null || true
          cp -r "$OUTDIR"/*.json "$FINAL/deps/" 2>/dev/null || true
          cp -r "$OUTDIR"/detect-secrets.json "$OUTDIR"/trufflehog-local.json "$FINAL/secrets/" 2>/dev/null || true
          mkdir -p "$FINAL/macos"
          cp -r "$OUTDIR"/macos* "$FINAL/macos/" 2>/dev/null || true
          tar -czf "$OUTDIR/pentest-all-reports.tar.gz" -C "$FINAL" . || true
          echo "Archive created at $OUTDIR/pentest-all-reports.tar.gz"

      - name: Upload final pentest archive (required)
        uses: actions/upload-artifact@v4
        with:
          name: pentest-all-reports
          path: ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz
          if-no-files-found: error
