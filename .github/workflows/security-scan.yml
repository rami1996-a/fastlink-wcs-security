name: iOS Pentest Pipeline (No Secrets Required)

on:
  workflow_dispatch:
    inputs:
      artifact_path:
        description: 'Path to IPA in repo (relative). If empty pipeline will attempt to build from Xcode project.'
        required: false
        default: ''

concurrency:
  group: ios-pentest-no-secrets
  cancel-in-progress: true

env:
  ARTIFACT_DIR: pentest-artifacts
  MOBSF_PORT: 8000

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      ipa_path: ${{ steps.get-artifact.outputs.ipa_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure artifact dir
        run: mkdir -p ${{ env.ARTIFACT_DIR }}

      - name: Get IPA input (workflow input) or find in repo
        id: get-artifact
        run: |
          if [ -n "${{ github.event.inputs.artifact_path }}" ]; then
            echo "ipa_path=${{ github.event.inputs.artifact_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          IPA=$(git ls-files '*.ipa' | head -n1 || true)
          if [ -n "$IPA" ]; then
            echo "ipa_path=$IPA" >> $GITHUB_OUTPUT
          else
            echo "ipa_path=" >> $GITHUB_OUTPUT
          fi
        
       
      
     

  mobsf_static_scan:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start MobSF Docker (no API key required)
        run: |
          docker run --rm -d --name mobsf -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          for i in $(seq 1 30); do
            if curl -sS "http://localhost:${MOBSF_PORT}/" > /dev/null; then break; fi
            sleep 2
          done
          curl -sS "http://localhost:${MOBSF_PORT}/" || true

      - name: Prepare IPA for scan
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          if [ -n "${{ needs.prep.outputs.ipa_path }}" ]; then
            cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa" || true
          else
            echo "No IPA provided; skipping MobSF upload (you can enable macos build job to create an ipa)." > ${{ env.ARTIFACT_DIR }}/mobsf-skip.txt
          fi
          ls -la ${{ env.ARTIFACT_DIR }}

      - name: Upload and scan with MobSF (no API key)
        if: ${{ needs.prep.outputs.ipa_path != '' }}
        run: |
          chmod +x scripts/mobsf_scan_noapikey.sh
          scripts/mobsf_scan_noapikey.sh "${{ env.ARTIFACT_DIR }}/target.ipa" "http://localhost:${MOBSF_PORT}" "${{ env.ARTIFACT_DIR }}"

      - name: Stop MobSF
        if: always()
        run: docker stop mobsf || true

      - name: Upload MobSF reports
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports
          path: ${{ env.ARTIFACT_DIR }}/mobsf_*.{json,html,xml},${{ env.ARTIFACT_DIR }}/mobsf-*.*
          if-no-files-found: ignore

  binary_static:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install basic tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip binutils python3-pip openjdk-11-jre-headless
          pip3 install macholib

      - name: Copy IPA and run binary static analysis
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          if [ -n "${{ needs.prep.outputs.ipa_path }}" ]; then
            cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa" || true
          fi
          chmod +x scripts/binary_static_analysis.sh
          scripts/binary_static_analysis.sh "${{ env.ARTIFACT_DIR }}/target.ipa" "${{ env.ARTIFACT_DIR }}"

      - name: Upload binary analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-analysis
          path: ${{ env.ARTIFACT_DIR }}/binary-*.txt
          if-no-files-found: ignore

  deps_and_codeql:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OWASP Dependency-Check (CLI)
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.0.2/dependency-check-8.0.2-release.zip -O /tmp/dc.zip
          unzip -q /tmp/dc.zip -d /tmp/dc || true
          chmod +x /tmp/dc/bin/dependency-check.sh

      - name: Run dependency-check on repo (CocoaPods/Swift)
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          # If podfile.lock exists, point dc at it; otherwise scan whole repo
          if [ -f Podfile.lock ]; then
            /tmp/dc/bin/dependency-check.sh --project "iOS-Deps" --scan Podfile.lock --format JSON --out ${{ env.ARTIFACT_DIR }} || true
          else
            /tmp/dc/bin/dependency-check.sh --project "iOS-Repo" --scan . --format JSON --out ${{ env.ARTIFACT_DIR }} || true
          fi

      - name: Run CodeQL (Swift)
        uses: github/codeql-action/init@v2
        with:
          languages: 'swift'
      - name: Autobuild (CodeQL)
        uses: github/codeql-action/autobuild@v2
      - name: Run CodeQL analyze
        uses: github/codeql-action/analyze@v2
        with:
          category: 'security'

      - name: Upload deps reports
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports
          path: ${{ env.ARTIFACT_DIR }}/*.json
          if-no-files-found: ignore

  secret_scan:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install detect-secrets & truffleHog (local)
        run: |
          pip3 install detect-secrets truffleHog

      - name: Run detect-secrets baseline and scan
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          detect-secrets scan > ${{ env.ARTIFACT_DIR }}/detect-secrets.json || true

      - name: Run truffleHog (local filesystem scan)
        run: |
          trufflehog filesystem --json . > ${{ env.ARTIFACT_DIR }}/trufflehog-local.json || true

      - name: Upload secret scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan
          path: ${{ env.ARTIFACT_DIR }}/detect-secrets.json,${{ env.ARTIFACT_DIR }}/trufflehog-local.json
          if-no-files-found: ignore

  macos_runtime:
    needs: prep
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CocoaPods (if needed)
        run: |
          brew update || true
          brew install cocoapods || true

      - name: Try to build for iOS simulator (no signing)
        run: |
          # Attempt to build an example scheme if present. Replace your workspace/scheme if required.
          if ls *.xcworkspace 1> /dev/null 2>&1 || ls *.xcodeproj 1> /dev/null 2>&1; then
            # Find workspace or project automatically (best effort)
            WORKSPACE=$(ls *.xcworkspace 2>/dev/null | head -n1 || true)
            PROJECT=$(ls *.xcodeproj 2>/dev/null | head -n1 || true)
            if [ -n "$WORKSPACE" ]; then
              echo "Found workspace: $WORKSPACE"
              xcodebuild -workspace "$WORKSPACE" -scheme "$(basename ${WORKSPACE%.*})" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build || true
            elif [ -n "$PROJECT" ]; then
              echo "Found project: $PROJECT"
              xcodebuild -project "$PROJECT" -scheme "$(basename ${PROJECT%.*})" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build || true
            else
              echo "No Xcode project/workspace found; skipping build"
            fi
          else
            echo "No xcode project/workspace present"
          fi

      - name: Upload macos artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-reports
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore

  collect_reports:
    needs: [mobsf_static_scan, binary_static, deps_and_codeql, secret_scan, macos_runtime]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect artifacts into final archive
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/final
          cp -r ${{ env.ARTIFACT_DIR }}/* ${{ env.ARTIFACT_DIR }}/final/ || true
          tar -czf ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz -C ${{ env.ARTIFACT_DIR }} final || true

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: pentest-all-reports
          path: ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz
          if-no-files-found: ignore

