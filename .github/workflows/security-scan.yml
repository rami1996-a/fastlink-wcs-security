name: iOS Pentest Pipeline (Full Inline Scripts)

on:
  workflow_dispatch:
    inputs:
      artifact_path:
        description: 'Path to IPA in repo (relative). If empty pipeline will attempt to build from Xcode project.'
        required: false
        default: 'ios.ipa'

env:
  ARTIFACT_DIR: pentest-artifacts
  MOBSF_PORT: 8000

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      ipa_path: ${{ steps.get-artifact.outputs.ipa_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure artifact directory
        run: mkdir -p "${{ env.ARTIFACT_DIR }}"

      - name: Get IPA path
        id: get-artifact
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.artifact_path }}" ]; then
            echo "ipa_path=${{ github.event.inputs.artifact_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          IPA=$(git ls-files '*.ipa' | head -n1 || true)
          echo "ipa_path=$IPA" >> $GITHUB_OUTPUT

  mobsf_static_scan:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start MobSF Docker
        run: |
          set -euo pipefail
          docker run --rm -d --name mobsf -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          for i in $(seq 1 30); do
            if curl -sS "http://localhost:${MOBSF_PORT}/" > /dev/null; then break; fi
            sleep 2
          done

      - name: Prepare IPA
        run: |
          set -euo pipefail
          if [ -n "${{ needs.prep.outputs.ipa_path }}" ]; then
            cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa"
          else
            echo "No IPA provided; failing MobSF scan"
            exit 1
          fi

      - name: Run MobSF scan (no API key)
        run: |
          set -euo pipefail
          IPA="${{ env.ARTIFACT_DIR }}/target.ipa"
          URL="http://localhost:${MOBSF_PORT}"
          mkdir -p "${{ env.ARTIFACT_DIR }}/mobsf"
          echo "Fallback MobSF scan (unzip + plist + strings)"
          unzip -q "$IPA" -d "${{ env.ARTIFACT_DIR }}/mobsf/fallback"

      - name: Stop MobSF
        if: always()
        run: docker stop mobsf || true

      - name: Upload MobSF reports
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports
          path: ${{ env.ARTIFACT_DIR }}/mobsf
          if-no-files-found: ignore

  binary_static:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip binutils python3-pip
          pip3 install macholib || true

      - name: Binary static analysis
        run: |
          set -euo pipefail
          IPA="${{ env.ARTIFACT_DIR }}/target.ipa"
          if [ ! -f "$IPA" ]; then
            echo "IPA not found; failing binary analysis"
            exit 1
          fi
          mkdir -p "${{ env.ARTIFACT_DIR }}/binary"
          unzip -q "$IPA" -d "${{ env.ARTIFACT_DIR }}/binary/unzipped"
          echo "[binary] Reports in ${ARTIFACT_DIR}/binary"

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-analysis
          path: ${{ env.ARTIFACT_DIR }}/binary
          if-no-files-found: ignore

  deps_and_codeql:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency check
        run: |
          set -euo pipefail
          mkdir -p "${{ env.ARTIFACT_DIR }}/deps"
          echo "[deps_scan] Running dummy scan (replace with actual deps_scan.sh)"
          touch "${{ env.ARTIFACT_DIR }}/deps/deps_report.json"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: swift

      - name: CodeQL analyze
        uses: github/codeql-action/analyze@v2
        continue-on-error: false
        with:
          category: security

      - name: Upload deps reports
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports
          path: ${{ env.ARTIFACT_DIR }}/deps
          if-no-files-found: ignore

  secret_scan:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Secret scanning
        run: |
          set -euo pipefail
          mkdir -p "${{ env.ARTIFACT_DIR }}/secrets"
          echo '{"detect-secrets":"dummy"}' > "${{ env.ARTIFACT_DIR }}/secrets/detect-secrets.json"
          echo '{"trufflehog":"dummy"}' > "${{ env.ARTIFACT_DIR }}/secrets/trufflehog-local.json"

      - name: Upload secret artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan
          path: ${{ env.ARTIFACT_DIR }}/secrets
          if-no-files-found: ignore

  macos_runtime:
    needs: prep
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: chmod +x scripts/*.sh || true

      - name: Attempt simulator build
        run: |
          set -euo pipefail
          if ls *.xcworkspace 1> /dev/null 2>&1 || ls *.xcodeproj 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace 2>/dev/null | head -n1 || true)
            PROJECT=$(ls *.xcodeproj 2>/dev/null | head -n1 || true)
            if [ -n "$WORKSPACE" ]; then
              SCHEME="$(basename ${WORKSPACE%.*})"
              xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            elif [ -n "$PROJECT" ]; then
              SCHEME="$(basename ${PROJECT%.*})"
              xcodebuild -project "$PROJECT" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            else
              echo "No Xcode project/workspace found"
              exit 1
            fi
          else
            echo "No Xcode project/workspace present"
            exit 1

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-reports
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: ignore

  collect_reports:
    needs: [mobsf_static_scan, binary_static, deps_and_codeql, secret_scan, macos_runtime]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Consolidate reports
        run: |
          set -euo pipefail
          tar -czf "${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz" -C "${{ env.ARTIFACT_DIR }}" .

      - name: Upload final pentest archive
        uses: actions/upload-artifact@v4
        with:
          name: pentest-all-reports
          path: ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz
          if-no-files-found: ignore
