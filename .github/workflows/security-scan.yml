name: APK Security Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  apk-security:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository (with LFS)
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Create working dirs
      run: |
        mkdir -p reports
        mkdir -p app_decompiled
        mkdir -p vpn
        mkdir -p tools

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip default-jdk android-tools-adb wget curl jq apktool ca-certificates git unzip zip

    - name: Install Python & CLI tools (MobSF, frida-tools, objection)
      run: |
        python -m pip install --upgrade pip
        pip install mobsfscan frida-tools objection || true

        # Install gitleaks binary
        GITLEAKS_VER="v8.19.1"
        wget -q "https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKS_VER}/gitleaks_${GITLEAKS_VER#v}_linux_x64.tar.gz" -O /tmp/gitleaks.tar.gz || true
        tar -xzf /tmp/gitleaks.tar.gz -C /tmp || true
        sudo mv /tmp/gitleaks /usr/local/bin/ || true
        gitleaks version || true

        # Install Syft (Anchore)
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin || true
        syft --version || true

        # Install Trivy (Aqua)
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin || true
        trivy --version || true

    - name: Verify repo-provided tools (frida-server, agents etc.)
      run: |
        echo "tools/ content (optional binaries expected here):"
        ls -la tools || true
        if [ ! -f "tools/frida-server-android-x86_64" ]; then
          echo "[!] frida-server-android-x86_64 missing under tools/ (optional)."
        fi
        if [ ! -f "tools/drozer-agent.apk" ]; then
          echo "[!] drozer-agent.apk missing under tools/ (we recommend using Frida/Objection instead)."
        fi

    - name: Install OpenFortiVPN client
      run: |
        sudo apt-get update
        sudo apt-get install -y openfortivpn

    - name: Connect to Fortinet VPN
      env:
        VPN_EMAIL: ${{ secrets.VPN_EMAIL }}
        VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
      run: |
        if [ -z "$VPN_EMAIL" ] || [ -z "$VPN_PASSWORD" ]; then
          echo "VPN secrets not provided - skipping VPN connection."
          exit 0
        fi

        sudo mkdir -p /etc/openfortivpn

        # Write config with proper variable expansion (note the use of EOF without single quotes)
        cat <<EOF | sudo tee /etc/openfortivpn/config > /dev/null
        host = znkfw.newroztelecom.com
        port = 10443
        username = ${VPN_EMAIL}
        password = ${VPN_PASSWORD}
        set-dns = 1
        set-routes = 1
        trusted-cert = d1766a4f0c0634b642d3d0e8dafc4b8f1258ed9dce9ee725ee19db9ce46fd233
        EOF

        echo "Connecting to VPN..."
        sudo openfortivpn -c /etc/openfortivpn/config > /tmp/openforti.log 2>&1 &
        sleep 15

        if grep -q "Connected" /tmp/openforti.log; then
          echo "VPN connected successfully"
          curl -I https://internal-api.company.local || echo "Internal API test failed"
        else
          echo "VPN connection failed"
          cat /tmp/openforti.log
          exit 1
        fi

    - name: Decompile APK (skip if existing)
      run: |
        if [ -d "app_decompiled" ] && [ "$(ls -A app_decompiled)" ]; then
          echo "[+] app_decompiled exists and is not empty â€” skipping decompile."
          ls -la app_decompiled | sed -n '1,200p'
        else
          echo "[+] Decompiling app.apk -> app_decompiled"
          apktool d app.apk -o app_decompiled || true
          echo "[+] Decompile done:"
          ls -la app_decompiled | sed -n '1,200p'
        fi

    - name: Run MobSF static scan
      run: |
        mkdir -p reports
        mobsfscan app_decompiled/AndroidManifest.xml --json > reports/mobsfscan.json || true

    - name: Run Gitleaks (secrets) on decompiled files
      run: |
        mkdir -p reports
        gitleaks detect --source app_decompiled --report-path reports/gitleaks.json || true

    - name: Generate SBOM from APK (Syft)
      run: |
        syft app.apk -o spdx-json > app_decompiled/sbom.json || true
        echo "SBOM packages count:"; jq '.packages | length' app_decompiled/sbom.json || true
        jq '(.packages[]? | {purl: .purl, name: .name, version: .version})' app_decompiled/sbom.json > reports/sbom_packages.json || true

    - name: Trivy quick scan (APK)
      run: |
        mkdir -p reports
        trivy fs --format json --output reports/trivy_apk.json app.apk || true

    - name: Run Dependency-Check (Docker)
      run: |
        mkdir -p reports/dependency-check
        docker run --rm -v "${{ github.workspace }}":/src -v "${{ github.workspace }}/reports/dependency-check":/report owasp/dependency-check:8.4.1 \
          --project "fastlink-wsc" --scan /src --out /report --format ALL || true


    - name: Launch Android Emulator & Run Dynamic Scan
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: default
        arch: x86_64
        profile: Nexus 6
        script: |
          chmod +x ./scripts/dynamic_scan.sh
          ./scripts/dynamic_scan.sh

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/**
          app_decompiled/**

    - name: Stop VPN (best-effort)
      if: ${{ always() }}
      run: |
        sudo pkill openfortivpn || true
        echo "[+] VPN stopped (if it was running)"
