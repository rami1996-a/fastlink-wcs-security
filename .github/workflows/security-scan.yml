name: iOS Pentest Pipeline (No Secrets Required - Inline Scripts)

on:
  workflow_dispatch:
    inputs:
      artifact_path:
        description: 'Path to IPA in repo (relative). If empty pipeline will attempt to build from Xcode project.'
        required: false
        default: 'ios.ipa'

concurrency:
  group: ios-pentest-no-secrets-${{ github.run_id }}
  cancel-in-progress: false

env:
  ARTIFACT_DIR: pentest-artifacts
  MOBSF_PORT: 8000

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      ipa_path: ${{ steps.get-artifact.outputs.ipa_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure artifact directory
        run: mkdir -p "${{ env.ARTIFACT_DIR }}"

      - name: Get IPA input
        id: get-artifact
        run: |
          set -euo pipefail
          ARTIFACT="${{ github.event.inputs.artifact_path }}"
          if [ -f "$ARTIFACT" ]; then
            echo "ipa_path=$ARTIFACT" >> $GITHUB_OUTPUT
          elif [ -f "ios.ipa" ]; then
            echo "ipa_path=ios.ipa" >> $GITHUB_OUTPUT
          else
            echo "ipa_path=" >> $GITHUB_OUTPUT
            echo "No IPA found; failing prep" >&2
            exit 1
          fi

  mobsf_static_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start MobSF Docker
        run: |
          set -euo pipefail
          docker run --rm -d --name mobsf -p ${MOBSF_PORT}:8000 opensecurity/mobile-security-framework-mobsf:latest
          for i in $(seq 1 30); do
            if curl -sS "http://localhost:${MOBSF_PORT}/" > /dev/null; then break; fi
            sleep 2
          done || true

      - name: Prepare IPA
        run: |
          set -euo pipefail
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          cp "${{ needs.prep.outputs.ipa_path }}" "${{ env.ARTIFACT_DIR }}/target.ipa"

      - name: Run MobSF scan (inline)
        run: |
          set -euo pipefail
          IPA="${{ env.ARTIFACT_DIR }}/target.ipa"
          OUTDIR="${{ env.ARTIFACT_DIR }}/mobsf"
          mkdir -p "$OUTDIR"
          # Try uploading via MobSF API
          RESPONSE=$(curl -s -F "file=@$IPA" "http://localhost:${MOBSF_PORT}/api/v1/upload")
          if [[ "$RESPONSE" != *"hash"* ]]; then
            echo "[mobsf] API upload failed; running fallback extraction"
            unzip -q "$IPA" -d "$OUTDIR/fallback" || true
          fi

      - name: Stop MobSF
        if: always()
        run: docker stop mobsf || true

      - name: Upload MobSF artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-reports
          path: ${{ env.ARTIFACT_DIR }}/mobsf/**
          if-no-files-found: ignore

  binary_static:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run binary static analysis (inline)
        run: |
          set -euo pipefail
          IPA="${{ needs.prep.outputs.ipa_path }}"
          OUTDIR="${{ env.ARTIFACT_DIR }}/binary"
          mkdir -p "$OUTDIR"
          if [ ! -f "$IPA" ]; then
            echo "IPA not found; failing binary analysis" >&2
            exit 1
          fi
          unzip -q "$IPA" -d "$OUTDIR/unzip" || true
          echo "[binary] done; outputs in $OUTDIR"

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-analysis
          path: ${{ env.ARTIFACT_DIR }}/binary/**
          if-no-files-found: ignore

  deps_and_codeql:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run dependency scan (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}/deps"
          mkdir -p "$OUTDIR"
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.0.2/dependency-check-8.0.2-release.zip -O /tmp/dc.zip
          unzip -q /tmp/dc.zip -d /tmp/dc
          chmod +x /tmp/dc/bin/dependency-check.sh
          /tmp/dc/bin/dependency-check.sh --project "repo" --scan . --out "$OUTDIR" || true

      - name: Initialize CodeQL (Swift)
        uses: github/codeql-action/init@v2
        with:
          languages: swift

      - name: Run CodeQL analyze
        uses: github/codeql-action/analyze@v2

      - name: Upload dependency-check artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports
          path: ${{ env.ARTIFACT_DIR }}/deps/**
          if-no-files-found: ignore

  secret_scan:
    needs: prep
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run detect-secrets + truffleHog (inline)
        run: |
          set -euo pipefail
          OUTDIR="${{ env.ARTIFACT_DIR }}/secrets"
          mkdir -p "$OUTDIR"
          pip3 install --upgrade pip >/dev/null 2>&1 || true
          pip3 install detect-secrets truffleHog >/dev/null 2>&1 || true

          detect-secrets scan > "$OUTDIR/detect-secrets.json" || true
          DETECT_SIZE=$(stat -c%s "$OUTDIR/detect-secrets.json" 2>/dev/null || echo 0)

          TRUFFLE_OK=1
          if trufflehog filesystem --json --repo_path . > "$OUTDIR/trufflehog-local.json" 2>/dev/null; then
            TRUFFLE_OK=0
          fi
          TRUFFLE_SIZE=$(stat -c%s "$OUTDIR/trufflehog-local.json" 2>/dev/null || echo 0)

          if [ "$DETECT_SIZE" -le 2 ] && [ "$TRUFFLE_OK" -ne 0 ]; then
            echo "[secrets] detect-secrets and truffleHog produced no output; failing" >&2
            exit 1
          fi
          echo "[secrets] done; outputs in $OUTDIR"

      - name: Upload secret scan outputs
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan
          path: ${{ env.ARTIFACT_DIR }}/secrets/*
          if-no-files-found: ignore

  macos_runtime:
    needs: prep
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run simulator build
        run: |
          set -euo pipefail
          if ls *.xcworkspace 1> /dev/null 2>&1 || ls *.xcodeproj 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace 2>/dev/null | head -n1 || true)
            PROJECT=$(ls *.xcodeproj 2>/dev/null | head -n1 || true)
            if [ -n "$WORKSPACE" ]; then
              SCHEME="$(basename ${WORKSPACE%.*})"
              xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            elif [ -n "$PROJECT" ]; then
              SCHEME="$(basename ${PROJECT%.*})"
              xcodebuild -project "$PROJECT" -scheme "$SCHEME" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' clean build
            else
              echo "No Xcode project/workspace found; skipping build"
            fi
          else
            echo "No Xcode project/workspace present"
          fi

  collect_reports:
    needs: [mobsf_static_scan, binary_static, deps_and_codeql, secret_scan, macos_runtime]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create final pentest archive
        run: |
          set -euo pipefail
          mkdir -p "${{ env.ARTIFACT_DIR }}"
          tar -czf "${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz" "${{ env.ARTIFACT_DIR }}"/*

      - name: Upload final pentest archive
        uses: actions/upload-artifact@v4
        with:
          name: pentest-all-reports
          path: ${{ env.ARTIFACT_DIR }}/pentest-all-reports.tar.gz
          if-no-files-found: ignore
